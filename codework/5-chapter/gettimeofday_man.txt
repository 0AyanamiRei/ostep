GETTIMEOFDAY(2)                                                  Linux Programmer's Manual                                                  GETTIMEOFDAY(2)

NAME
       gettimeofday, settimeofday - get / set time

SYNOPSIS
       #include <sys/time.h>

       int gettimeofday(struct timeval *tv, struct timezone *tz);

       int settimeofday(const struct timeval *tv, const struct timezone *tz);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       settimeofday():
           Since glibc 2.19:
               _DEFAULT_SOURCE
           Glibc 2.19 and earlier:
               _BSD_SOURCE

DESCRIPTION
       tv 参数是一个 timeval 结构体（在 <sys/time.h> 中指定）：

       The tv argument is a struct timeval (as specified in <sys/time.h>):

           struct timeval {
               time_t      tv_sec;     /* 秒 */
               suseconds_t tv_usec;    /* 微秒 */
           };

       并给出自 Epoch (see time(2)) 以来的秒数和微秒数

       tz 参数是一个 timezone 结构体：

           struct timezone {
               int tz_minuteswest;     /* 格林威治以西的分钟数 */
               int tz_dsttime;         /* DST校正的类型 */
           };

        如果 tv 或 tz 为 NULL，相应的结构体不会被设置或返回。（然而，如果 tv 为 NULL，将会产生编译警告。）

        使用 timezone 结构体已经过时；tz 参数通常应指定为 NULL。（参见下面的注释。）

        在 Linux 下，如果在第一次调用（启动后）具有非 NULL tz 参数的 settimeofday() 系统调用时，tv 参数为 NULL 并且 tz_minuteswest 字段为非零（此情况下，tz_dsttime 字段应为零），则会出现一些特殊的 "warp clock" 语义。在这种情况下，假定 CMOS 时钟是本地时间，并且必须增加这个量以获取 UTC 系统时间。
        无疑，使用这个特性是个坏主意。

RETURN VALUE
       gettimeofday() and settimeofday() return 0 for success, or -1 for failure (in which case errno is set appropriately).

ERRORS
       EFAULT One of tv or tz pointed outside the accessible address space.

       EINVAL (settimeofday()): timezone is invalid.

       EINVAL (settimeofday()): tv.tv_sec is negative or tv.tv_usec is outside the range [0..999,999].

       EINVAL (since Linux 4.3)
              (settimeofday()): An attempt was made to set the time to a value less than the current value of the  CLOCK_MONOTONIC  clock  (see  clock_get‐
              time(2)).

       EPERM  The calling process has insufficient privilege to call settimeofday(); under Linux the CAP_SYS_TIME capability is required.

CONFORMING TO
       SVr4, 4.3BSD.  POSIX.1-2001 describes gettimeofday() but not settimeofday().  POSIX.1-2008 marks gettimeofday() as obsolete, recommending the use of
       clock_gettime(2) instead.

NOTES
       The time returned by gettimeofday() is affected by discontinuous jumps in the system time (e.g., if the system administrator  manually  changes  the
       system time).  If you need a monotonically increasing clock, see clock_gettime(2).

       Macros for operating on timeval structures are described in timeradd(3).

       Traditionally, the fields of struct timeval were of type long.

   C library/kernel differences
       On some architectures, an implementation of gettimeofday() is provided in the vdso(7).

   The tz_dsttime field
       On  a non-Linux kernel, with glibc, the tz_dsttime field of struct timezone will be set to a nonzero value by gettimeofday() if the current timezone
       has ever had or will have a daylight saving rule applied.  In this sense it exactly mirrors the meaning of daylight(3) for  the  current  zone.   On
       Linux,  with  glibc, the setting of the tz_dsttime field of struct timezone has never been used by settimeofday() or gettimeofday().  Thus, the fol‐
       lowing is purely of historical interest.

       On old systems, the field tz_dsttime contains a symbolic constant (values are given below) that indicates in which part of the year Daylight  Saving
       Time is in force.  (Note: this value is constant throughout the year: it does not indicate that DST is in force, it just selects an algorithm.)  The
       daylight saving time algorithms defined are as follows:

           DST_NONE     /* not on DST */
           DST_USA      /* USA style DST */
           DST_AUST     /* Australian style DST */
           DST_WET      /* Western European DST */
           DST_MET      /* Middle European DST */
           DST_EET      /* Eastern European DST */
           DST_CAN      /* Canada */
           DST_GB       /* Great Britain and Eire */
           DST_RUM      /* Romania */
           DST_TUR      /* Turkey */
           DST_AUSTALT  /* Australian style with shift in 1986 */

       Of course it turned out that the period in which Daylight Saving Time is in force cannot be given by a simple algorithm, one  per  country;  indeed,
       this period is determined by unpredictable political decisions.  So this method of representing timezones has been abandoned.

SEE ALSO
       date(1), adjtimex(2), clock_gettime(2), time(2), ctime(3), ftime(3), timeradd(3), capabilities(7), time(7), vdso(7), hwclock(8)

COLOPHON
       This  page  is  part of release 5.10 of the Linux man-pages project.  A description of the project, information about reporting bugs, and the latest
       version of this page, can be found at https://www.kernel.org/doc/man-pages/.

Linux                                                                    2019-03-06                                                         GETTIMEOFDAY(2)
